//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataPersonabyId", ReplyAction="http://tempuri.org/IService/GetDataPersonabyIdResponse")]
        System.Threading.Tasks.Task<string> GetDataPersonabyIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerEmpleados", ReplyAction="http://tempuri.org/IService/ObtenerEmpleadosResponse")]
        System.Threading.Tasks.Task<string> ObtenerEmpleadosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerEmpleadosActivos", ReplyAction="http://tempuri.org/IService/ObtenerEmpleadosActivosResponse")]
        System.Threading.Tasks.Task<string> ObtenerEmpleadosActivosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerActivos", ReplyAction="http://tempuri.org/IService/ObtenerActivosResponse")]
        System.Threading.Tasks.Task<string> ObtenerActivosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegistrarActivo", ReplyAction="http://tempuri.org/IService/RegistrarActivoResponse")]
        System.Threading.Tasks.Task<string> RegistrarActivoAsync(string Nombre, string Descripcion, bool Estatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegistrarEmpleado", ReplyAction="http://tempuri.org/IService/RegistrarEmpleadoResponse")]
        System.Threading.Tasks.Task<string> RegistrarEmpleadoAsync(int numeroEmpleado, bool estatus, System.DateTime fechaIngreso, string nombre, string apellidos, string curp, string correo, System.DateTime FechaNacimiento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegistrarActivoEmpledao", ReplyAction="http://tempuri.org/IService/RegistrarActivoEmpledaoResponse")]
        System.Threading.Tasks.Task<string> RegistrarActivoEmpledaoAsync(int identificadorEmpleado, int identificadoActivo, System.DateTime fechaAsignacion, System.DateTime fechaLiberacion, System.DateTime fechaEntrega);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IServiceChannel : ServiceReference1.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IService>, ServiceReference1.IService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value)
        {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataPersonabyIdAsync(int id)
        {
            return base.Channel.GetDataPersonabyIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerEmpleadosAsync()
        {
            return base.Channel.ObtenerEmpleadosAsync();
        }
        
        public System.Threading.Tasks.Task<string> ObtenerEmpleadosActivosAsync()
        {
            return base.Channel.ObtenerEmpleadosActivosAsync();
        }
        
        public System.Threading.Tasks.Task<string> ObtenerActivosAsync()
        {
            return base.Channel.ObtenerActivosAsync();
        }
        
        public System.Threading.Tasks.Task<string> RegistrarActivoAsync(string Nombre, string Descripcion, bool Estatus)
        {
            return base.Channel.RegistrarActivoAsync(Nombre, Descripcion, Estatus);
        }
        
        public System.Threading.Tasks.Task<string> RegistrarEmpleadoAsync(int numeroEmpleado, bool estatus, System.DateTime fechaIngreso, string nombre, string apellidos, string curp, string correo, System.DateTime FechaNacimiento)
        {
            return base.Channel.RegistrarEmpleadoAsync(numeroEmpleado, estatus, fechaIngreso, nombre, apellidos, curp, correo, FechaNacimiento);
        }
        
        public System.Threading.Tasks.Task<string> RegistrarActivoEmpledaoAsync(int identificadorEmpleado, int identificadoActivo, System.DateTime fechaAsignacion, System.DateTime fechaLiberacion, System.DateTime fechaEntrega)
        {
            return base.Channel.RegistrarActivoEmpledaoAsync(identificadorEmpleado, identificadoActivo, fechaAsignacion, fechaLiberacion, fechaEntrega);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:52267/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
